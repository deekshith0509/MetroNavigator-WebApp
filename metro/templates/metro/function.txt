    CSRF Token for Django
    {% csrf_token %}
    
    <script>
        function haversineDistance(lat1, lon1, lat2, lon2) {
            function toRad(x) {
                return x * Math.PI / 180;
            }
            const R = 6371000; // Earth's radius in meters
            const φ1 = toRad(lat1);
            const φ2 = toRad(lat2);
            const Δφ = toRad(lat2 - lat1);
            const Δλ = toRad(lon2 - lon1);
            const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
                      Math.cos(φ1) * Math.cos(φ2) *
                      Math.sin(Δλ/2) * Math.sin(Δλ/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        // Function to show metro information based on user location
        function showMetroInfo() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Fetch nearest metro station based on user's position
        function showPosition(position) {
            const userLatitude = position.coords.latitude;
            const userLongitude = position.coords.longitude;

            fetch('/nearest_station/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                },
                body: JSON.stringify({
                    latitude: userLatitude,
                    longitude: userLongitude
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.nearest_station) {
                    let message = `Nearest Metro Station: ${data.nearest_station.name}\n`;
                    message += `Distance: ${Math.round(data.distance)} meters\n`;
                    message += `Line: ${data.nearest_station.line_color}\n`;
                    
                    if (data.nearest_station.is_interchange) {
                        message += "This is an interchange station!\n";
                    }
                    
                    message += "\nNearest 5 stations:\n";
                    data.nearest_stations.forEach(station => {
                        message += `${station.station}: ${Math.round(station.distance)}m (${station.line_color} line)\n`;
                    });
                    
                    alert(message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error getting nearest station information');
            });
        }

        // Error handling for geolocation
        function showError(error) {
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    alert("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    alert("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    alert("An unknown error occurred.");
                    break;
            }
        }

        // Call function automatically when page loads
        document.addEventListener('DOMContentLoaded', showMetroInfo);
    </script>